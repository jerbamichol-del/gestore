(() => {\n  if (location.pathname.includes('/reset/')) return;\n  const API = "https://script.google.com/macros/s/AKfycbzmq-PTrMcMdrYqCRX29_S034zCaj5ttyc3tZhdhjV77wF6n99LKricFgzy7taGqKOo/exec";\n  if (!API) return;\n  // Attiva solo dopo una vera interazione, per evitare trigger automatici\n  let armed = false;\n  const arm = () => { armed = true; enable(); window.removeEventListener("pointerdown", arm, true); window.removeEventListener("keydown", arm, true); };\n  window.addEventListener("pointerdown", arm, true);\n  window.addEventListener("keydown", arm, true);\n  let inFlight = false;\n  let lastSent = 0;\n  function getScope(){\n    const l=document.querySelector('link[rel="manifest"]');\n    if(l&&l.getAttribute('href')){\n      try{ const u=new URL(l.getAttribute("href"),location.href); const m=u.pathname.match(/^\/([^/]+)\//); if(m) return "/"+m[1]+"/"; }catch(e){}\n    }\n    return "/gestore/";\n  }\n  const SCOPE=getScope();\n  const REDIRECT=location.origin+SCOPE+"reset/";\n  function sendReset(email){\n    if (!armed) return;\n    if (!email || !API) return;\n    const now = Date.now();\n    if (inFlight || (now - lastSent) < 8000) return;\n    inFlight = true; lastSent = now;\n    const url=API+'?action=request&email='+encodeURIComponent(email)+'&redirect='+encodeURIComponent(REDIRECT);\n    try { fetch(url,{method:"GET",cache:"no-store",mode:"no-cors"}) } catch(e) {}\n    setTimeout(()=>{ inFlight=false; }, 1500);\n    try { alert("Se esiste un account con questa email, riceverai un link di reset."); } catch(e){}\n  }\n  function pickEmail(){\n    try{const s=localStorage.getItem("gs_email"); if(s) return s;}catch(e){}\n    const email=prompt("Inserisci la tua email per resettare il PIN:");\n    if(email){ try{localStorage.setItem("gs_email", email);}catch(e){} }\n    return email;\n  }\n  function attach(el){\n    if(!el||el.__gs_bound) return; el.__gs_bound=true;\n    el.addEventListener("click",(ev)=>{\n      if (!armed) return;\n      if (!ev.isTrusted) return;\n      try{ev.preventDefault();ev.stopPropagation();}catch(e){}\n      const email=pickEmail();\n      if(email) sendReset(email);\n    },{capture:true});\n  }\n  function findResetButtons(){\n    // Se vuoi andare sul sicuro: usa un attributo dedicato [data-reset-mail] sul tuo bottone\n    const out=[...document.querySelectorAll("[data-reset-mail]")];\n    if(out.length) return out;\n    // Fallback molto prudente (IN ITALIANO) per non attaccare altri bottoni\n    const all=[...document.querySelectorAll("button, [role=\"button\"], a")];\n    return all.filter(el=>{\n      const t=(el.textContent||"").trim().toLowerCase();\n      return (t.includes("invia")||t.includes("manda")) && t.includes("reset") && (t.includes("link")||t.includes("pin"));\n    });\n  }\n  // --- MODALE PIN: si apre quando rileviamo reset pendente ---\n  function showPinModal(){\n    if (document.getElementById("gs-pin-modal")) return;\n    const wrap=document.createElement("div"); wrap.id="gs-pin-modal";\n    wrap.style.cssText="position:fixed;inset:0;background:rgba(0,0,0,.5);display:flex;align-items:center;justify-content:center;z-index:99999;";\n    const card=document.createElement("div");\n    card.style.cssText="width:min(92%,420px);background:#fff;border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,.2);padding:20px;font-family:system-ui,Arial,sans-serif;";\n    card.innerHTML = \\n      "<h2 style=\"margin:0 0 8px;font-size:18px\">Imposta nuovo PIN</h2>"+\n      "<p style=\"margin:0 0 12px;color:#475569;font-size:14px\">Inserisci e conferma un PIN di 4–6 cifre.</p>"+\n      "<div style=\"display:flex;gap:8px;flex-direction:column\">"+\n      "  <input id=\"gs-pin1\" inputmode=\"numeric\" pattern=\"\\d*\" minlength=\"4\" maxlength=\"6\" placeholder=\"Nuovo PIN\" style=\"padding:10px;border:1px solid #cbd5e1;border-radius:10px;font-size:16px\">"+\n      "  <input id=\"gs-pin2\" inputmode=\"numeric\" pattern=\"\\d*\" minlength=\"4\" maxlength=\"6\" placeholder=\"Conferma PIN\" style=\"padding:10px;border:1px solid #cbd5e1;border-radius:10px;font-size:16px\">"+\n      "  <div style=\"display:flex;gap:8px;justify-content:flex-end;margin-top:8px\">"+\n      "    <button id=\"gs-pin-cancel\" style=\"padding:8px 12px;border-radius:10px;background:#e2e8f0\">Annulla</button>"+\n      "    <button id=\"gs-pin-save\" style=\"padding:8px 12px;border-radius:10px;background:#4f46e5;color:#fff\">Salva</button>"+\n      "  </div>"+\n      "</div>";\n    wrap.appendChild(card); document.body.appendChild(wrap);\n    const $ = (id)=>card.querySelector(id);\n    $("#gs-pin-cancel").onclick=()=>{ wrap.remove(); };\n    $("#gs-pin-save").onclick=()=>{\n      const p1 = $("#gs-pin1").value.replace(/\D/g,"");\n      const p2 = $("#gs-pin2").value.replace(/\D/g,"");\n      if (!/^\d{4,6}$/.test(p1)) { alert("PIN non valido (4–6 cifre)."); return; }\n      if (p1!==p2) { alert("I PIN non coincidono."); return; }\n      try { localStorage.setItem("gs_pin", p1); } catch(e) {}\n      try { localStorage.setItem("pin", p1); } catch(e) {}\n      try { localStorage.removeItem("gs_pin_reset_pending"); } catch(e) {}\n      try { window.dispatchEvent(new CustomEvent("gs-pin-updated",{detail:{pin:p1}})); } catch(e) {}\n      alert("PIN aggiornato.");\n      wrap.remove();\n    };\n  }\n  function checkPending(){\n    try { if (localStorage.getItem("gs_pin_reset_pending")==="1") showPinModal(); } catch(e) {}\n  }\n  // wires\n  function scan(){ if (!armed) return; findResetButtons().forEach(attach); }\n  const mo = new MutationObserver(scan);\n  function enable(){ scan(); mo.observe(document.documentElement,{childList:true,subtree:true}); checkPending(); document.addEventListener("visibilitychange",()=>{ if(document.visibilityState==="visible") checkPending(); }); }\n  // helper manuale per test da console\n  window.gsResetTest = (email)=>{ if (!armed) { armed=true; enable(); } sendReset(email); };\n})();