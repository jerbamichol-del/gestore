name: PWA Deploy (self-healing)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency: pages

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm install

      # Overlay: se index.tsx importa ./debug-overlay.js e il file non c'è, creiamo un no-op.
      - name: Ensure no-op debug overlay
        run: |
          [ -f debug-overlay.js ] || echo "// noop overlay in CI" > debug-overlay.js

      # Build con una config Vite "effimera" fatta apposta per Pages
      - name: Build with Pages config
        env:
          VITE_GEMINI_API_KEY: ${{ secrets.VITE_GEMINI_API_KEY }}
        run: |
          cat > vite.pages.config.mjs << 'EOF'
          import react from '@vitejs/plugin-react'
          import { defineConfig } from 'vite'

          export default defineConfig({
            base: '/gestore/',
            plugins: [react()],
            build: { outDir: 'dist' },
            // Se nel codice c'è process.env.API_KEY, lo rimpiazziamo a build time.
            define: {
              'process.env.API_KEY': JSON.stringify(process.env.VITE_GEMINI_API_KEY || ''),
            },
          })
          EOF

          npx vite build -c vite.pages.config.mjs

      # Patch post-build: link manifest e service worker a /gestore/ e bump cache
      - name: Patch dist/index.html for Pages
        run: |
          RUN="${{ github.run_number }}"
          # Link manifest a /gestore/ con cache-bust
          sed -i -E "s#<link rel=\"manifest\"[^>]*>#<link rel=\"manifest\" href=\"/gestore/manifest.json?v=${RUN}\" />#" dist/index.html || true
          # Forza registrazione SW su /gestore/ con scope corretto e cache-bust
          sed -i -E "s#serviceWorker\\.register\\([^)]*\\)#serviceWorker.register('/gestore/service-worker.js?v=${RUN}', { scope: '/gestore/' })#" dist/index.html || true

      # Copia asset PWA dalla root nella build (manifest, sw, icone)
      - name: Copy PWA assets
        run: |
          mkdir -p dist
          [ -f manifest.json ] && cp -v manifest.json dist/ || true
          [ -f service-worker.js ] && cp -v service-worker.js dist/ || true
          # Se usi SVG in root:
          for f in icon-192.svg icon-512.svg; do
            [ -f "$f" ] && cp -v "$f" dist/ || true
          done
          # Se un domani metti PNG in /icons
          [ -d icons ] && cp -rv icons dist/ || true
          # Fallback SPA (refresh su rotte client)
          cp -v dist/index.html dist/404.html

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
